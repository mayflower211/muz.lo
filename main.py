import logging
import os
import re
import asyncio
from functools import wraps

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, FSInputFile
from aiogram.utils.markdown import hbold, hcode
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
from yandex_music import ClientAsync
import yt_dlp

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
YM_TOKEN = os.getenv("YM_TOKEN")
REJECT_STICKER_ID = os.getenv("REJECT_STICKER_ID")
allowed_ids_str = os.getenv("ALLOWED_TG_IDS", "")
ALLOWED_IDS = [int(id.strip()) for id in allowed_ids_str.split(',')] if allowed_ids_str else []

if not all([BOT_TOKEN, YM_TOKEN, REJECT_STICKER_ID, ALLOWED_IDS]):
    logging.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env")
    exit()

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú –ó–ê–î–ê–ß ---
USER_TASKS = {}  # {user_id: asyncio.Task}

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
dp = Dispatcher()
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
ym_client = ClientAsync(YM_TOKEN)

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def sanitize_filename(filename: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å–∏–º–≤–æ–ª—ã, –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –≤ Windows."""
    return re.sub(r'[<>:"/\\|?*]', '_', filename)

def cleanup_user_task(user_id: int):
    """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    USER_TASKS.pop(user_id, None)

# --- –î–ï–ö–û–†–ê–¢–û–† ---
def access_control(handler):
    @wraps(handler)
    async def wrapper(message: Message, *args, **kwargs):
        if message.from_user.id not in ALLOWED_IDS:
            logging.warning(f"Unauthorized access denied for {message.from_user.id} ({message.from_user.username})")
            try:
                await message.answer_sticker(REJECT_STICKER_ID)
                await message.answer("–í–∞–º –∑–¥–µ—Å—å –Ω–µ —Ä–∞–¥—ã. –ü—Ä–æ—Ö–æ–¥ –∑–∞–ø—Ä–µ—â–µ–Ω.")
            except TelegramBadRequest as e:
                logging.error(f"Could not send reject sticker. Maybe ID is wrong? Error: {e}")
                await message.answer("Access denied.")
            return
        return await handler(message, *args, **kwargs)
    return wrapper

# --- –•–≠–ù–î–õ–ï–†–´ ---
@dp.message(CommandStart())
@access_control
async def command_start_handler(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, —Ö–æ–∑—è–∏–Ω {hbold(message.from_user.full_name)}!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫, –∞–ª—å–±–æ–º, –ø–ª–µ–π–ª–∏—Å—Ç –∏–ª–∏ –≤–∏–¥–µ–æ.\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /favorites –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è '–ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–ª–∏–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π /cancel."
    )
    await message.delete()

@dp.message(Command("cancel"))
@access_control
async def cancel_handler(message: Message):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    user_id = message.from_user.id
    task = USER_TASKS.get(user_id)

    if task and not task.done():
        task.cancel()
        await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    await message.delete()

async def start_playlist_download(message: Message, track_ids: list, source_name: str):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞/–∞–ª—å–±–æ–º–∞."""
    user_id = message.from_user.id
    if USER_TASKS.get(user_id) and not USER_TASKS[user_id].done():
        await message.reply("–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel")
        return

    if not track_ids:
        await message.reply(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤ –≤ '{source_name}'.")
        return

    progress_message = await message.answer(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é {len(track_ids)} —Ç—Ä–µ–∫–æ–≤ –∏–∑ '{source_name}'...")
    
    try:
        await bot.pin_chat_message(
            chat_id=user_id,
            message_id=progress_message.message_id,
            disable_notification=True
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –û—à–∏–±–∫–∞: {e}")

    task = asyncio.create_task(
        process_download_queue(user_id, track_ids, progress_message, source_name)
    )
    USER_TASKS[user_id] = task
    await message.delete()

@dp.message(Command("favorites"))
@access_control
async def download_favorites_handler(message: Message):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç '–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è'."""
    await message.reply("–ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤...")
    try:
        liked_tracks = await ym_client.users_likes_tracks()
        track_ids = [track.id for track in liked_tracks.tracks]
        await start_playlist_download(message, track_ids, "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
    except Exception as e:
        logging.error(f"Error getting favorites: {e}", exc_info=True)
        await message.answer(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ '–ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ': {e}")


@dp.message(F.text)
@access_control
async def main_downloader_handler(message: Message):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫."""
    user_id = message.from_user.id
    url_pattern = r'https?://[^\s]+'
    url_match = re.search(url_pattern, message.text)
    
    if not url_match:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return

    url = url_match.group(0)

    try:
        # –ü–ª–µ–π–ª–∏—Å—Ç –Ø.–ú—É–∑—ã–∫–∏
        playlist_match = re.search(r"users/([^/]+)/playlists/(\d+)", url)
        if playlist_match:
            username, playlist_id = playlist_match.groups()
            await message.reply("–ü–æ–ª—É—á–∞—é —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞...")
            playlist = await ym_client.users_playlists_fetch_all(playlist_id, username)
            await start_playlist_download(message, [t.id for t in playlist.tracks], playlist.title)
            return

        # –ê–ª—å–±–æ–º –Ø.–ú—É–∑—ã–∫–∏
        album_match = re.search(r"album/(\d+)", url)
        if album_match and "/track/" not in url:
            album_id = album_match.group(1)
            await message.reply("–ü–æ–ª—É—á–∞—é —Ç—Ä–µ–∫–∏ –∏–∑ –∞–ª—å–±–æ–º–∞...")
            album_with_tracks = await ym_client.albums_with_tracks(album_id)
            track_ids = []
            if album_with_tracks.volumes:
                for volume in album_with_tracks.volumes:
                    track_ids.extend([track.id for track in volume])
            await start_playlist_download(message, track_ids, album_with_tracks.title)
            return

        # –¢—Ä–µ–∫ –Ø.–ú—É–∑—ã–∫–∏
        track_match = re.search(r"album/(\d+)/track/(\d+)", url)
        if track_match:
            track_id = track_match.group(2)
            await download_single_track(track_id, user_id, message_to_delete=message)
            return

        # –î—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã
        if any(s in url for s in ["youtube.com", "youtu.be", "tiktok.com", "instagram.com"]):
            await download_with_yt_dlp(url, message)
            return

        await message.reply("–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç—Ä–µ–∫–∏, –∞–ª—å–±–æ–º—ã, –ø–ª–µ–π–ª–∏—Å—Ç—ã –Ø.–ú—É–∑—ã–∫–∏ –∏ –≤–∏–¥–µ–æ —Å YouTube/TikTok/Instagram.")

    except Exception as e:
        logging.error(f"Error processing URL {url}: {e}", exc_info=True)
        await message.answer(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {e}")

# --- –í–û–†–ö–ï–† –ò –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

async def process_download_queue(user_id: int, track_ids: list, progress_message: Message, source_name: str):
    """–§–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    total_tracks = len(track_ids)
    downloaded_count = 0
    DOWNLOAD_DELAY = 5

    try:
        for i, track_id in enumerate(track_ids):
            if i % 3 == 0 or i == total_tracks - 1:
                try:
                    await bot.edit_message_text(
                        chat_id=user_id,
                        message_id=progress_message.message_id,
                        text=f"–°–∫–∞—á–∏–≤–∞—é '{source_name}'\n"
                             f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {downloaded_count}/{total_tracks}"
                    )
                except TelegramBadRequest as e:
                    if "message is not modified" not in str(e):
                        logging.warning(f"Could not edit progress message: {e}")

            try:
                await download_single_track(track_id, user_id)
                downloaded_count += 1
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å track_id {track_id}: {e}", exc_info=True)
                await bot.send_message(user_id, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞ —Å ID {track_id}. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
            
            await asyncio.sleep(DOWNLOAD_DELAY)
        
        await bot.edit_message_text(
            chat_id=user_id,
            message_id=progress_message.message_id,
            text=f"‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ '{source_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
                 f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {downloaded_count} –∏–∑ {total_tracks}."
        )

    except asyncio.CancelledError:
        await bot.edit_message_text(
            chat_id=user_id,
            message_id=progress_message.message_id,
            text=f"‚ùå –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n"
                 f"–£—Å–ø–µ–ª–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è: {downloaded_count} –∏–∑ {total_tracks}."
        )
        logging.info(f"Task for user {user_id} was cancelled.")
        
    finally:
        try:
            await bot.unpin_chat_message(chat_id=user_id, message_id=progress_message.message_id)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –û—à–∏–±–∫–∞: {e}")
        
        cleanup_user_task(user_id)

async def download_single_track(track_id: str, user_id: int, message_to_delete: Message = None):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç—Ä–µ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ."""
    try:
        track_info = (await ym_client.tracks([track_id]))[0]
        artist = track_info.artists_name()[0]
        title = track_info.title
        
        raw_filename = f"{artist} - {title}.mp3"
        filename = sanitize_filename(raw_filename)

        download_info_list = await track_info.get_download_info_async()
        if not download_info_list:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")

        sorted_downloads = sorted(download_info_list, key=lambda x: x.bitrate_in_kbps, reverse=True)
        best_download_info = sorted_downloads[0]
        best_bitrate = best_download_info.bitrate_in_kbps

        await best_download_info.download_async(filename)
        
        audio_file = FSInputFile(filename)
        await bot.send_audio(
            chat_id=user_id, audio=audio_file, caption=f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ: {best_bitrate} kbps",
            performer=artist, title=title
        )
        os.remove(filename)

        if message_to_delete:
            await message_to_delete.delete()
    except Exception as e:
        if message_to_delete:
            await bot.send_message(user_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫ –∏–∑ {message_to_delete.text}: {e}")
        raise e

async def download_with_yt_dlp(url: str, message: Message):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é yt-dlp."""
    output_template = sanitize_filename('%(title)s.%(ext)s')
    ydl_opts = {'outtmpl': output_template, 'format': 'best[ext=mp4][filesize<=50M]/best[filesize<=50M]', 'noplaylist': True}

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = await asyncio.to_thread(ydl.extract_info, url, download=True)
        
        filename = ydl.prepare_filename(info)
        video_file = FSInputFile(filename)
        await bot.send_video(
            chat_id=message.chat.id, video=video_file, 
            caption=f"‚úÖ {info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}",
            supports_streaming=True
        )
        os.remove(filename)
        await message.delete()

    except yt_dlp.utils.DownloadError as e:
        logging.warning(f"yt-dlp download error for {url}: {e}")
        await message.reply("üö´ –û—à–∏–±–∫–∞: –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ( >50 –ú–ë), –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        raise e

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
async def main() -> None:
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    await ym_client.init()
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")